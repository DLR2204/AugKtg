on-1 ;off -0 -------->binary    [bi-deci]====> ASCII,UNICODE ......


programming lang :- programs(set of instructions )



s.l :- designing website(collection of webpages)



p.l :- devlop the softwares
		os,drivers,web app's

							computer langs
						
					scripting lang 			programming lang 
					
		html,css,js,bootstrap....				pop   oop		
								basic,cobal				java,.net,lisp,cpp
								
								
								
			java :-  oop's oopl
			
											
website:- the collection of webpages.

				static webpages:- changes will be stagnant (registration pages)
				
				dynamic webpages:-changes will happens regularly(insta news feed)
				
				server webpges:-data from the static nd dynamic webpages will get stores here.
				
		
		
		HTML:-Hyper text Markup Lang
		
		hyper text :- text is linked with another web link /web Page.
		
		
		notepad,vs code.
		
		
		tags:- <predefined words>
		
				container/pair :-  <predefined words></predefined words>
				
				single/empty    :- <predefined words>  or </predefined words> or  <predefined words/>
		
		<h1 class="values">Welcome to Html</h1>
		
		
		
		Lists:- <li></li>
		
		ordered list(Numberings)  :-<ol></ol>
		
		unordered list (Bullets ):-<ul></ul>
		
		
		
			LInks :-   <a></a>
			
			
		(1)Text linking

		(2)Image linking
		
		
		<table>
		<tr><td></td></tr>
		
		
							CSS:-
							
		(1)Inline styling:-inside any html tag styling can injected using style attribute
		
		(2)Internal styling:-styling in style tag inside the head tag 
		
		(3)External styling:-attacthing external css to the html doc.
		
		
		
		colors:-
		-------
		
		
		(1)color name :- ex:-red
		
		(2)Hexadecimal :- #rgb--->(00-ff)
		
		(3)rgb function :- rgb(r,g,b)  ----->(0-255)
		
		(4)rgb function with alpha :-  rgb(r,g,b,(0-1))
		
		(5)hsl function :- hsl(hue,saturation,lightning) (0-360)(0-100%)
		
		(6)hsl with alpha :- hsl(h,s,l,a(0-1))
		
		
		
		selectors:-
		----------
		
		(1)name based  :- h1{},p,body.....
		
		(2)id name (#) :- idname{}
		
		(3)class name(.) :-  classname{}
		
		(4)universal selector(*) :- *{}
		
		
		javascript:-
		==========
		
		
		(1)scripting lang :- client side;server side
		
		(2)Design dynamic web app's.
		
		(3)change the html content
		
		(4)Can change the attributes of html tags
		
		(5)can change the css
		
		(6)can hide our data
		
		
		
		internal js:- <script> inside the head/body
		
		external js :- attaching external js to the html document
		
		
		predefined functions to check the output in js:-
		
		
		(1)innerHTML = based on id the content will be displayed on the webpage(document.getElementById)
		
		(2)document.write("text") = given text will be displayed
		
		(3)window.alert("text") = alert box wil be appeared with the given text
		
		(4)console.log("text") = given text will be displayed in the console window
		
		
				var varname;  --------->declration
				
				var varname = values;-------->instiallation
				
				
				functions :- set of statements all together perform a similar task
				
				function functionname(params....){
				
				statements;
				
				return data;
				
				}
				
				
				flow control statement:-
				
				(1)conditional statements if,switch,if else..
				
				(2)Iterative statements while,do-while,for..
				
				(3)Transfer statements. break,contiunue...
				
				
				Number:-
				
				
				10* 20 =integer
				
				20/"string" 
				
				
				
				Bootstrap:-
				===========
				
				To include the bootstrap into the html doc.2 ways:-
				
				(1)Cdn (Content delivery network)
				
				(2)By downloading bootstrap files from the bootstrap website
				
				
				
				Grid system:- 
				------------	Here the webpage will be divided into 12 columns.
				
					class="container"
					
						class="col"
						 
				
												React:-
												-------
				------>CBA (Component based architecture)

					components :- 2 types
					
					(1)sateless functional components ------->javascript function
					
					(2)statefull class components ----------->javascript class
												
		
		
		props:-  demo(props){
		
		
		}<html tag  attributes="values">
		
		
		State :-
		
		
		methods  :- set of statements all together performs a particular task.
		functions
		
		
		
		
		
		SECURIRY :-  Encapsulation,Abstraction.
		
		Performance :- Inheritance , Poloymorphism.
		
		
		(1)platform independency:-
		
		(2)Garbage collector:-
		
		
		3 editions:-
		
		jse/j2se:-core java [standalone app's(no client-server)]
		
		jee/j2ee:-adv java [distributed app's(client-server)] 
		
		jme/j2me:-micro core java[mobile app's]
		
		
		
		1995----sunmicrosys
		
		green team -------->green talk(.gt)------------>oak--------------->java(.java)
		
		jdk 1.0 ---------------------->jdk 22
		
		
		53------->reserved words(keywords)
		
		
	
	*******shortcuts in ecllipse ide:-
	
	main,syso ---ctrl+space
	
	format -----ctrl+shift+f
	
	
	
	variables:-		
			
	syntax:-		
			
	datatypes  variablename ; //declaration of a variable
	
	
	datatypes  variablename = value; //intialization of a variable
	
	
	
			local var(inside the methods) 			gloabal var(outside the mehtod)
	

												static 			instance 
												
												
	syntax:-
	-------
	static :-  	static dt var = vaalue;
	
	instance:-	dt var = value;

	Access:-
	-------
	
	static :- static prop's can be accessed by the class reference 
	
	instance :- instance prop's can be accessed by the object reference
	
				object creation:-
				
				classname objname = new Classname();
	
	
	Memory space:-
	-------------
	
	static :- static prop's will gets the memory space only once at the time of class loading 
					into the jvm
	
	instance :- instance prop's will gets the memory space for every object creation
	
	
	in memory:-
	----------
	
	static:- Method area
	
	instance:- heap area
	
	usage:-
	-----
	
	static:- to store the common data.  nationality ="indian"
	
	instance:- to store the unique data. aadhar card ="unique"
	
	
	
				operators:-
				==========
				
				
				a + b---->operands
				
				
				U-unary 
				L-Logical
				T-terinary  ?
				R-reltional
				A-assignment =
				A-arithemetic
				B-bitwise
	
	

	METHODS:-set of statements where altogether performs an unique task.
	=======
	syntax:-		accessmodifer returntype methodname(prms..){
	-------				//body  }
				
				2 types:-
				
				(1)Static methods
	
	syntax:-		accessmodifer static returntype methodname(prms..){
	-------				//body  }	
				
				
				(2)Dynamic methods
					
	syntax:-		accessmodifer returntype methodname(prms..){
	-------				//body  }				
	
	
	
	class = var + methods => class members + member functions
	
	
			oops:-
			
			
		Inheritance :-Accquring the parent clss features to the child clss.
	
				* Code reusability
				
				
				(1)extends 						(2)implements
				
			class ----> class					interface ------>class
			
			
			


interface A{					interface B{

add(a,b);						add(a,b);

						

}								}



class C implements A,B{

add(3,4);

}


		*M.I is not supported in java @ class level.
		
		* M.I is supported in java @ interface level.
		
		
		
		methods 2 types:- based on the method body/implementation
		
		(1)concrete methods:- the method with method body/implementation
		====================
	syntax:-		accessmodifer returntype methodname(prms..){
	-------				//body  }
		
		(2)abstract methods:- the mehtod with out method/implementation
		====================
		
	syntax:-		accessmodifer returntype methodname(prms..);
	-------			
		
		
		class :- It's the only collection of concrete methods
		
		
		interface :- It's the only collection of abstract methods
		
		
		abstract class :- It's the combination of both concrete methods + abstract methods.
		
		
		
		Abstraction:- Hiding the data
		===========            * SECURITY
		
		
		
		interface (100%)   abstract class(0-100%)    class(0%)
		
		
		polymorphism:-   * Code Reuseability
		============
		
		(1)MethodOverloading:- Method with the same name but difference is in parms...
								(a)type of parms..
								
								(b)order of prms..
								
								(c)no:of parms..
		
		(2)MethodOverriding:-Method name is same but the method's implementation is different
		
		
		class Parent{
		
		relatives(){}
		
		marrige(){
		kajol;
		}
		
		1000.Cr(){}
		
		//1000 methods
		
		}
		
		class Child extends Parent{
		
		
		@Override
		marriage(){
		deepika;
		}
		
		
		}
		
		accessmodifier:-
		==============
		
		Encapsulation:-wrapping up the data into a single entity.
		==============
		
		* The default parent class for every java file is "Object Class".
		
		*The default package for every java file "java.lang"
		
		
		
		Constructor:-To initialize the objects
		------------
					*No return type.
					
					
						(1)default constructor
						
						
		syntax:- accessmodifier Classname(){
		
			//body
		}
		
		
		
				classnme objname = new classnme();
					
						
						(2)parametrized constructor
						
						
		syntax:- accessmodifier Classname(params...){
		
			//body
		}
		
		
		Exception Handling:-
		-------------------
		
		(1)To terminate our program in a normal ways
		
		(2)To throw user friendly error msg's.
		
		
		
		
		
		Arrays:-It's the container of variables where every value should be the same type/It's a collection similar kind of objects
		
		
		syntax:-
		
				(1) int arr[] = new int[34];
				
				arr[6]=45;
				
				(2)int arr[] = new int[]{23,45,546,6,6,7,7,7,7};
				
				(3)int arr[] = {3,2,5,3435,45,4,5,45,45,4};
				
				
				
	(1)Array length is fixed
	
	(2)It will only homogenous elements
	
	(3)No utility methods
	
	
	
	Collections:-Framework
	===========
	
	(1)Growable in nature
	
	(2)It will stores both homogenous,heterogenous data
	
	(3)It will have lots of uility methods.
	
	
	
	lang -comparable-compareTo(a,b);------------>customaizable sorting order(cso)
	
	util -comparator-compare(a,b); --------------->natural sorting order(nso)
	
	
	
	FileHandling:-		java.io*
	------------		
	
					
			(1)create a file            :-File

			(2)write into a file		:-FileWriter
										  BufferedWriter
										  PrintWriter
										  
			(3)read from a file			:-FileReader
										  BufferedReader
								


				Function Interface :- sam (single abstract method)
							
			(1)MultiThreading:-Running several tasks at a time.				
							
				synchronised
				
				non-synchronised 
				
				
			Junit:- To test a piece of code is called java Unit testing